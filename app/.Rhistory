real_capacity_per_year = real_capacity_per_year,
mines = ncol(real_capacity_per_year),
capacity = input$CPY,
total_capacity_of_mine = c(input$num1, input$num2, input$num3,
input$num4, input$num5, input$num6),
extraction_cost_per_tone = input$C,
alpha_coking = input$alpha_coking,
alpha_thermal = input$alpha_thermal,
b_coking = input$b_coking,
b_thermal = input$b_thermal,
sd_coking = input$sd_coking,
sd_thermal = input$sd_thermal,
rho = c(input$rho1, input$rho2, input$rho3,
input$rho4, input$rho5, input$rho6)
)
})
output$plot <- renderPlot({
if(input$Coal_Type == "total_graphs")
plot1 <- plots_DP()$X_plot
if(input$Coal_Type == "thermal_graphs")
plot1 <- plots_DP()$X_thermal_plot
if(input$Coal_Type == "coking_graphs")
plot1 <- plots_DP()$X_coking_plot
plot1
})
output$g_k_graph <- renderPlot({
if(input$Coal_Type == "total_graphs")
plot2 <- plots_DP()$g_k_plot
if(input$Coal_Type == "thermal_graphs")
plot2 <- plots_DP()$X_thermal_g_k_plot
if(input$Coal_Type == "coking_graphs")
plot2 <- plots_DP()$X_coking_g_k_plot
plot2
})
# Plot the accumulated reward g
output$g_graph <- renderPlot({
if(input$Coal_Type == "total_graphs")
plot3 <- plots_DP()$g_plot
if(input$Coal_Type == "thermal_graphs")
plot3 <- plots_DP()$X_thermal_g_plot
if(input$Coal_Type == "coking_graphs")
plot3 <- plots_DP()$X_coking_g_plot
plot3
})
}
navbarPage("Coal Mining in Mozambique | DP Algorithm",
tabPanel("Motivation",
includeHTML("about.html")
),
tabPanel("DP Algorithm",
includeHTML("algorithm.html")
),
tabPanel("Modeling",
sidebarLayout(
sidebarPanel(
radioButtons("Coal_Type", "Coal type",
c("Total"="total_graphs",
"Thermal"="thermal_graphs",
"Coking"="coking_graphs")),
radioButtons("CPY", "Capacity per year",
c("Real (constant)"="constant",
"Real (sampling)"="sampling")),
sliderInput("N", label = "Number of Years", min = 20,
max = 100, value = 50),
sliderInput("C", label = "Cost per ton", min = 5,
max = 80, value = 10),
sliderInput("alpha_coking", label = "Mean price coking", min = 102,
max = 170, value = 102),
sliderInput("alpha_thermal", label = "Mean price thermal", min = 63,
max = 110, value = 63),
sliderInput("b_coking", label = "coking price sensibility", min = 0.1,
max = 5, value = 1.5),
sliderInput("b_thermal", label = "thermal price sensibility", min = 0.1,
max = 5, value = 0.8),
sliderInput("sd_coking", label = "coking shocks sd", min = 41 * 0.3,
max = 81 * 0.3, value = 61 * 0.3),
sliderInput("sd_thermal", label = "thermal shocks sd", min = 1 * 0.3,
max = 41 * 0.3, value = 21 * 0.3),
inputPanel(h4("Reserves"),
numericInput("num1",
label = "Ncondezi",
value = 1000,
min = 1000,
max = 10000,
step = 100,
width = "75%"),
numericInput("num2",
label = "Revobue",
value = 1000,
min = 1000,
max = 10000,
step = 100,
width = "75%"),
numericInput("num3",
label = "Zambeze",
value = 900,
min = 900,
max = 1500,
step = 100,
width = "75%"),
numericInput("num4",
label = "Beacon Hill",
value = 360,
min = 360,
max = 1000,
step = 20,
width = "75%"),
numericInput("num5",
label = "Benga",
value = 500,
min = 500,
max = 700,
step = 50,
width = "75%"),
numericInput("num6",
label = "Moatize",
value = 425,
min = 425,
max = 950,
step = 25,
width = "75%")
),
inputPanel(h4("Share of coking coal"),
sliderInput("rho1", label = "Ncondezi", min = 0,
max = 1, value = 0),
sliderInput("rho2", label = "Revobue", min = 0,
max = 1, value = 0.6),
sliderInput("rho3", label = "Zambeze", min = 0,
max = 1, value = 0.6),
sliderInput("rho4", label = "Beacon Hill", min = 0,
max = 1, value = 0.31),
sliderInput("rho5", label = "Benga", min = 0,
max = 1, value = 0.6),
sliderInput("rho6", label = "Moatize", min = 0,
max = 1, value = 0.8)
)
),
mainPanel(
plotOutput("plot"),
plotOutput("g_k_graph"),
plotOutput("g_graph")
))
),
tags$head(tags$style(HTML('
.irs-bar {
background: #fb370b;
border-top:#fb370b;
border-bottom:#fb370b;
}
.irs-bar-edge {
border: #fb370b;
background: #fb370b;
}
.irs-single {
background: #fb370b;
}
'))))
shiny::runApp('GSE/Semester2/Stochastic/coal_dp_app/app')
getwd()
setwd("~/GSE/Semester2/Stochastic/coal_dp_app/app")
getwd()
real_capacity_per_year <- read.csv("/Users/k2/GSE/Semester2/Stochastic/coal_dp_app/app/mine_limits.csv")[,-1]
mines <- ncol(real_capacity_per_year)  # number of mines
# Auxiliar functions
colSums2 <- function(x) {
if(is.matrix(x) == TRUE){
colSums(x)
} else {
colSums(t(as.matrix(x)))
}
}
simulation_DP_basis <- function(N = 50, # number of concession years
mines = 6,
capacity = "random",
real_capacity_per_year = NULL,
extraction_cost_per_tone = 10, # extraction cost per tone of coal
total_capacity_of_mine = rep(1000, mines),
alpha_coking = 102,
b_coking = 1.2,
sd_coking = 61 * 0.3,
alpha_thermal = 63,
b_thermal = 4,
sd_thermal = 21 * 0.3,
rho = seq(0.3, 0.8, 0.1)) {
if(capacity == "sampling") {
capacity_per_year <- matrix(0, nrow = N, ncol = mines)
for(i in 1:mines) {
mine_capacity_aux <- table(as.numeric(na.exclude(real_capacity_per_year[,i])))
mine_capacity_aux <- mine_capacity_aux / sum(mine_capacity_aux)
capacity_per_year_aux <- NULL
for(j in 1:length(mine_capacity_aux)) {
capacity_per_year_aux <- c(capacity_per_year_aux,
rep(as.numeric(names(mine_capacity_aux[j])), ceiling(N*mine_capacity_aux[j])))
}
if(length(capacity_per_year_aux) > N){
capacity_per_year[1:N, i] <- capacity_per_year_aux[1:N]
} else {
capacity_per_year[1:length(capacity_per_year_aux), i] <- capacity_per_year_aux
}
}
}
if(capacity == "random") {
capacity_per_year <- NULL
for(i in 1:mines) {
capacity_per_year <- cbind(capacity_per_year, floor(runif(N, min = 0, max = total_capacity_of_mine[i])))
}
}
if(capacity == "constant") {
real_capacity_per_year[is.na(real_capacity_per_year)] <- 0
capacity_per_year <- NULL
for(i in 1:mines){
capacity_per_year <- cbind(capacity_per_year,
c(real_capacity_per_year[, i],
rep(tail(real_capacity_per_year[, i], 1), N - nrow(real_capacity_per_year))))
}
}
capacity_per_year <- rbind(capacity_per_year, rep(0, mines))
# Variables
# Dynamics of the model
X <- NULL
error_lag_coking = rnorm(1, mean = 0, sd = sd_coking)
error_lag_thermal = rnorm(1, mean = 0, sd = sd_thermal)
weighted_alpha <- (1 - rho) * alpha_thermal + rho * alpha_coking
real_prices <- NULL
for(i in 1:N) {
error_coking     <- rnorm(1, mean = 0, sd = sd_coking)
Price_k_coking   <- alpha_coking + b_coking*error_lag_coking + error_coking
Price_k_forecast_coking <- alpha_coking + b_coking*error_coking
error_thermal     <- rnorm(1, mean = 0, sd = sd_thermal)
Price_k_thermal   <- alpha_thermal + b_thermal*error_lag_thermal + error_thermal
Price_k_forecast_thermal <- alpha_thermal + b_thermal*error_thermal
weighted_price <- (1 - rho) * Price_k_thermal  + rho * Price_k_coking
weighted_price_forecast <- (1- rho) * Price_k_forecast_thermal + rho * Price_k_forecast_coking
weighted_price_vector <- rbind(weighted_price_forecast, matrix(rep(weighted_alpha, (N-i)), ncol = mines))
X_aux = NULL
for(j in 1:mines){
if(sum(weighted_price_vector[,j] > weighted_price[j]) == 0 | is.vector(capacity_per_year[(i+1):(N+1), j])) {
X_aux <- rbind(X_aux, pmin(pmax(0, total_capacity_of_mine[j] - 0),
capacity_per_year[i,j]))
} else {
X_aux <- rbind(X_aux, pmin(pmax(0, total_capacity_of_mine[j] - sum(capacity_per_year[(i+1):(N+1),j][weighted_price_vector[,j] > weighted_price[j]])),
capacity_per_year[i,j]))
}
total_capacity_of_mine[j] <- total_capacity_of_mine[j] - X_aux[j,]
}
X = rbind(X, as.vector(X_aux))
error_lag_coking <- error_coking
error_lag_thermal <- error_thermal
real_prices <- rbind(real_prices, c(Price_k_coking, Price_k_thermal))
}
colnames(real_prices) <- c("coking", "thermal")
X <- as.data.frame(X)
colnames(X) <- colnames(real_capacity_per_year)
g_k <- NULL
for(i in 1:mines){
g_k <- cbind(g_k, (rho[i] * real_prices[,1] + (1 - rho[i]) * real_prices[,2] - extraction_cost_per_tone) * X[,i])
}
g_k <- as.data.frame(g_k)
colnames(g_k) <- colnames(X)
g <- matrix(0, nrow = nrow(g_k) + 1, ncol = mines)
for(i in 2:nrow(g)){
g[i, ] = as.numeric(g_k[i-1, ]) + g[i-1,]
}
g <- g[-1,]
g <- as.data.frame(g)
colnames(g) <- colnames(X)
X_thermal <- NULL
X_coking  <- NULL
for(i in 1:ncol(as.matrix(X))) {
X_thermal <- cbind(X_thermal, (1-rho[i]) * as.matrix(X)[,i])
X_coking  <-  cbind(X_coking, rho[i] * as.matrix(X)[,i])
}
X_thermal_g_k <- X_thermal * real_prices[,2]
X_coking_g_k  <- X_coking * real_prices[,1]
X_thermal_g <- matrix(0, nrow = nrow(X_thermal_g_k) + 1, ncol = mines)
for(i in 2:nrow(X_thermal_g)){
X_thermal_g[i, ] = as.numeric(X_thermal_g_k[i-1, ]) + X_thermal_g[i-1,]
}
X_thermal_g <- X_thermal_g[-1, ]
X_coking_g <- matrix(0, nrow = nrow(X_coking_g_k) + 1, ncol = mines)
for(i in 2:nrow(X_coking_g)){
X_coking_g[i, ] = as.numeric(X_coking_g_k[i-1, ]) + X_coking_g[i-1,]
}
X_coking_g <- X_coking_g[-1, ]
X_thermal <- as.data.frame(X_thermal)
colnames(X_thermal) <- colnames(X)
X_thermal_g_k <- as.data.frame(X_thermal_g_k)
colnames(X_thermal_g_k) <- colnames(X)
X_thermal_g <- as.data.frame(X_thermal_g)
colnames(X_thermal_g) <- colnames(X)
X_coking <- as.data.frame(X_coking)
colnames(X_coking) <- colnames(X)
X_coking_g_k <- as.data.frame(X_coking_g_k)
colnames(X_coking_g_k) <- colnames(X)
X_coking_g <- as.data.frame(X_coking_g)
colnames(X_coking_g) <- colnames(X)
##### Reshaping Data
# Create a vector for the number of years under consideration
years <- c(2011:(2011+N-1))
# Reshape total coal output for ggplot
X <- cbind(years, X)
X <- melt(X, id = "years")
# Reshape coking coal output for ggplot
X_coking <- cbind(years, X_coking)
X_coking <- melt(X_coking, id = "years")
# Reshape thermal coal output for ggplot
X_thermal <- cbind(years, X_thermal)
X_thermal <- melt(X_thermal, id = "years")
g_k <- cbind(years, g_k)
g_k <- melt(g_k, id = "years")
g <- cbind(years, g)
g <- melt(g, id = "years")
X_thermal_g_k <- cbind(years, X_thermal_g_k)
X_thermal_g_k <- melt(X_thermal_g_k, id = "years")
X_thermal_g <- cbind(years, X_thermal_g)
X_thermal_g <- melt(X_thermal_g, id = "years")
X_coking_g_k <- cbind(years, X_coking_g_k)
X_coking_g_k <- melt(X_coking_g_k, id = "years")
X_coking_g <- cbind(years, X_coking_g)
X_coking_g <- melt(X_coking_g, id = "years")
X_plot <- ggplot(X, aes(x = years, y = value, colour = variable)) +
geom_line(size  = 2) +
ylab("Production in million tons per annum") +
ggtitle("Coal extraction per annum") +
theme(plot.title = element_text(hjust = 0.5, face = "bold")) +
theme(panel.background = element_blank(), panel.grid = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
panel.grid.major.y = element_line(linetype = 2, color = "gray"),
axis.title = element_text(face = "bold"),
axis.text = element_text(face = "bold")) +
scale_y_continuous(expand = c(0,0.5)) +
scale_x_continuous(expand = c(0, 0))
g_k_plot <- ggplot(g_k, aes(x = years, y = value, colour = variable)) +
geom_line(size  = 2) +
ylab("profit") +
ggtitle("Annual profit per annum") +
theme(plot.title = element_text(hjust = 0.5, face = "bold")) +
theme(panel.background = element_blank(), panel.grid = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
panel.grid.major.y = element_line(linetype = 2, color = "gray"),
axis.title = element_text(face = "bold"),
axis.text = element_text(face = "bold")) +
scale_y_continuous(expand = c(0,0.5)) +
scale_x_continuous(expand = c(0, 0))
g_plot <- ggplot(g, aes(x = years, y = value, colour = variable)) +
geom_line(size  = 2) +
ylab("profit") +
ggtitle("Cumulative profit") +
theme(plot.title = element_text(hjust = 0.5, face = "bold")) +
theme(panel.background = element_blank(), panel.grid = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
panel.grid.major.y = element_line(linetype = 2, color = "gray"),
axis.title = element_text(face = "bold"),
axis.text = element_text(face = "bold")) +
scale_y_continuous(expand = c(0,0.5)) +
scale_x_continuous(expand = c(0, 0))
X_thermal_plot <- ggplot(X_thermal, aes(x = years, y = value, colour = variable)) +
geom_line(size  = 2) +
ylab("Production in million tons per annum") +
ggtitle("Coal extraction per annum") +
theme(plot.title = element_text(hjust = 0.5, face = "bold")) +
theme(panel.background = element_blank(), panel.grid = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
panel.grid.major.y = element_line(linetype = 2, color = "gray"),
axis.title = element_text(face = "bold"),
axis.text = element_text(face = "bold")) +
scale_y_continuous(expand = c(0,0.5)) +
scale_x_continuous(expand = c(0, 0))
X_thermal_g_k_plot <- ggplot(X_thermal_g_k, aes(x = years, y = value, colour = variable)) +
geom_line(size  = 2) +
ylab("profit") +
ggtitle("Annual profit per annum") +
theme(plot.title = element_text(hjust = 0.5, face = "bold")) +
theme(panel.background = element_blank(), panel.grid = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
panel.grid.major.y = element_line(linetype = 2, color = "gray"),
axis.title = element_text(face = "bold"),
axis.text = element_text(face = "bold")) +
scale_y_continuous(expand = c(0,0.5)) +
scale_x_continuous(expand = c(0, 0))
X_thermal_g_plot <- ggplot(X_thermal_g, aes(x = years, y = value, colour = variable)) +
geom_line(size  = 2) +
ylab("profit") +
ggtitle("Cumulative profit") +
theme(plot.title = element_text(hjust = 0.5, face = "bold")) +
theme(panel.background = element_blank(), panel.grid = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
panel.grid.major.y = element_line(linetype = 2, color = "gray"),
axis.title = element_text(face = "bold"),
axis.text = element_text(face = "bold")) +
scale_y_continuous(expand = c(0,0.5)) +
scale_x_continuous(expand = c(0, 0))
X_coking_plot <- ggplot(X_coking, aes(x = years, y = value, colour = variable)) +
geom_line(size  = 2) +
ylab("Production in million tons per annum") +
ggtitle("Coal extraction per annum") +
theme(plot.title = element_text(hjust = 0.5, face = "bold")) +
theme(panel.background = element_blank(), panel.grid = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
panel.grid.major.y = element_line(linetype = 2, color = "gray"),
axis.title = element_text(face = "bold"),
axis.text = element_text(face = "bold")) +
scale_y_continuous(expand = c(0,0.5)) +
scale_x_continuous(expand = c(0, 0))
X_coking_g_k_plot <- ggplot(X_coking_g_k, aes(x = years, y = value, colour = variable)) +
geom_line(size  = 2) +
ylab("profit") +
ggtitle("Annual profit per annum") +
theme(plot.title = element_text(hjust = 0.5, face = "bold")) +
theme(panel.background = element_blank(), panel.grid = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
panel.grid.major.y = element_line(linetype = 2, color = "gray"),
axis.title = element_text(face = "bold"),
axis.text = element_text(face = "bold")) +
scale_y_continuous(expand = c(0,0.5)) +
scale_x_continuous(expand = c(0, 0))
X_coking_g_plot <- ggplot(X_coking_g, aes(x = years, y = value, colour = variable)) +
geom_line(size  = 2) +
ylab("profit") +
ggtitle("Cumulative profit") +
theme(plot.title = element_text(hjust = 0.5, face = "bold")) +
theme(panel.background = element_blank(), panel.grid = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
panel.grid.major.y = element_line(linetype = 2, color = "gray"),
axis.title = element_text(face = "bold"),
axis.text = element_text(face = "bold")) +
scale_y_continuous(expand = c(0,0.5)) +
scale_x_continuous(expand = c(0, 0))
return(list(X_plot = X_plot, g_k_plot = g_k_plot, g_plot = g_plot,
X_thermal_plot = X_thermal_plot, X_coking_plot = X_coking_plot,
X_thermal_g_k_plot = X_thermal_g_k_plot, X_coking_g_k_plot = X_coking_g_k_plot,
X_thermal_g_plot = X_thermal_g_plot, X_coking_g_plot = X_coking_g_plot))
}
runApp()
runApp()
runApp()
runApp()
**Model set-up**
We have a company that has a $N$ years concession of 6 mines of coal from which it extracts two types of coal (thermal coal and coking coal). Both types are mixed in the same rock, so one does not decide which type to mine, when the coal is mined a certain percentage is coking and the rest is thermal. Coking coal is more valuable than thermal coal. Each mine has its own maximum production capacity per year ($m_k^i$, $i=1,\dots,6$), a finite amount of coal ($C^i$, $i=1\dots,6$) and a certain fixed share of coking coal $\rho^i$, and a share of thermal coal $1 - \rho^i$.
The mines are connected to the port (from which they are exported) by railways that have a total transport capacity $T$. The price of each type of coal is a random variable $w_k^c$, $w_k^t$, which we observe at the start of the year, before we decide how much to mine in that year. The prices of coking and thermal coal are generated using fixed expected prices, but with stochastic shocks which persist for one period, in an MA(1) fashion: $w_k^c=a^c + \beta^c\epsilon_{k-1}^c + \epsilon_k^c$, $w_k^t=a^t + \beta^t\epsilon_{k-1}^t + \epsilon_k^t$, where for both coking and thermal, $\mathbb{E}[\epsilon_k] = 0$. There is a fixed cost of extraction per ton of coal $c$ and if the coal is mined but cannot be transported it is sold at a discount to local energy plants, contributing with a value of $s<c$.
**Primitives**:
$x_k^i$: Remaining coal reserves (stock of coal) in mine i at period $k$.
$u_k^i$: How much coal to mine in mine i at period $k$.
$w_k^c$: Price per ton of coking coal in period k.
$w_k^t$: Price per ton of thermal coal in period k.
$\rho^i$: Share of coking coal in mine i.
$1 - \rho^i$: Share of thermal coal in mine i.
$c$: Cost of extracting a ton of coal.
$s$: Salvage price per ton of thermal coal.
$m_k^i$: Maximum production capacity for mine i in period k.
$T$: Transport capacity.
**Constrains**:
$u_k^i\leq m_k^i$
$x_k^i\geq 0$
$s < c$
**Dynamics**:
$x_{k+1}=x_k-u_k$
$w_k^c=a^c + \beta^c\epsilon_{k-1}^c + \epsilon_k^c$, where $\mathbb{E}[\epsilon_k^c] = 0$
$w_k^t=a^t + \beta^t\epsilon_{k-1}^t + \epsilon_k^t$, where $\mathbb{E}[\epsilon_k^t] = 0$
**Profit**:
$g_N(x_N)=0$
$g_k(x_k,u_k,w_k)=v_k^cw_k^c+v_k^tw_k^t-cu_k+s\max\{0,u_k-T\}$, where  $$\left(\begin{array}{c}
v_k^c\\
v_k^t
\end{array}\right)=\left\{\begin{array}{ll}
\left(\begin{array}{c}
\rho u_k\\
(1-\rho)u_k
\end{array}\right) & \text{if } u_k\leq T\\
\left(\begin{array}{c}
\min\{\rho u_k,T\}\\
T-\min\{\rho u_k,T\}
\end{array}\right) & \text{if } u_k> T
\end{array}\right.$$
**DP algorithm**:
First approach, $T=\infty$. (no salvage value).
$J_N(x_N)=0$.
$J_{k}(x_k)=\underset{\underset{u_{k}\leq x_{k}}{u_{k}\leq m_{k},}}{\max}\mathbb{E}[u_k(\rho w_k^c+(1-\rho)w_k^t-c)+J_{k+1}(x_k-u_k)]$.
**Solving the DP problem**:
\begin{align}
J_{N-1}(x_{N-1})&=\underset{\underset{\ u_{N-1}\leq x_{N-1}}{u_{N-1}\leq m_{N-1},}}{\max}\mathbb{E}[u_{N-1}(\rho w_{N-1}^c+(1-\rho)w_{N-1}^t-c)]\\
&=\underset{\underset{\ u_{N-1}\leq x_{N-1}}{u_{N-1}\leq m_{N-1},}}{\max}\{u_{N-1}(\rho\mathbb{E}[w_{N-1}]+(1-\rho)\mathbb{E}[w_{N-1}]-c)\}=\\
&\underset{\underset{\ u_{N-1}\leq x_{N-1}}{u_{N-1}\leq m_{N-1},}}{\max}\{u_{N-1}(\rho(a_c(N-1)+b_c)+(1-\rho)(a_t(N-1)+b_t)-c).
\end{align}
Since $\rho(a_c(N-1)+b_c)+(1-\rho)(a_t(N-1)+b_t)>c$, the function is always increasing on $u_{N-1}$, so the maximum will be accomplished on the more restrictive constrain. $u_{N-1}=\min\{m_{N-1},x_{N-1}\}$.
Now, for $N-2$:
\begin{align}
J_{N-2}(x_{N-2})&=\underset{\underset{\ u_{N-2}\leq x_{N-2}}{u_{N-2}\leq m_{N-2},}}{\max}\mathbb{E}[u_{N-2}(\rho w_{N-2}^c+(1-\rho)w_{N-2}^t-c)+J_{N-1}(x_{N-2}-u_{N-1})]=\\
&=\underset{\underset{\ u_{N-2}\leq x_{N-1}}{u_{N-2}\leq m_{N-2},}}{\max}\{u_{N-2}(\rho(a_c(N-2)+b_c)+(1-\rho)(a_t(N-2)+b_t)-c)+\\
&+\min\{m_{N-1},x_{N-2}-u_{N-2}\}(\rho(a_c(N-1)+b_c)+(1-\rho)(a_t(N-1)+b_t)-c)\}.
\end{align}
Since $\rho(a_c(N-1)+b_c)+(1-\rho)(a_t(N-1)+b_t)-c>\rho(a_c(N-2)+b_c)+(1-\rho)(a_t(N-2)+b_t)-c$, in order to maximize we need $\min\{m_{N-1},x_{N-2}-u_{N-2}\}$ to be as big as possible. That means
$$\max\left\{\begin{array}{ll}
m_{N-1} & \text{if }x_{N-2}-u_{N-2}>m_{N-1}\\
x_{N-2}-u_{N-2} & \text{otherwise}
\end{array}\right.,$$
which will be attained when $u_{N-2}=(x_{N-2}-m_{N-1})^+$. However, since could happen that $(m_{N-1}-x_{N-2})^+>m_{N-2}$, the optimal policy would be $u_k=\min\{(x_{N-2}-m_{N-1})^+,m_{N-2}\}$.
Backward induction proves that $u_k=\min\{(x_{k}-\sum_{i=k+1}^{N-1}m_i)^+,m_{k}\}$
$$g_k(x_k,u_k,w_k)=\left\{\begin{array}{ll}
\min\left\{\sum\limits_{i=1}^6\rho_iu_k^i,T\right\}w_k^c+\left(\min\left\{\sum\limits_{i=1}^6(1-\rho_i)u_k^i,T-\sum\limits_{i=1}^6\rho_iu_k^i\right\}\right)^+w_k^t-c\sum\limits_{i=1}^6u_k^i+s\min\left\{\sum\limits_{i=1}^6(1-\rho_i)u_k^i,\left(T-\sum\limits_{i=1}^6\rho_iu_k^i\right)^+\right\} & \text{If }w_k^c\geq w_k^t\\
\left(\min\left\{\sum\limits_{i=1}^6\rho_iu_k^i,T-\sum\limits_{i=1}^6(1-\rho_i)u_k^i\right\}\right)^+w_k^c+\min\left\{\sum\limits_{i=1}^6(1-\rho_i)u_k^i,T\right\}w_k^t-c\sum\limits_{i=1}^6u_k^i & \text{If }w_k^c<w_k^t
\end{array}\right.$$
runApp()
