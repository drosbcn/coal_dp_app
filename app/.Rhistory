font-weight: 600;
}
.sidebar-menu li>a>.pull-right {
top: 40%;
}
.fa {
font-size: 20px;
'))),
# Boxes need to be put in a row (or column)
fluidRow(
#box(plotOutput("plot1", height = 250)),
box(
title = "Histogram", status = "warning", solidHeader = TRUE,
collapsible = FALSE,
plotOutput("plot1", height = 250)
),
box(
title = "Inputs", status = "warning", solidHeader = TRUE,height = 310,
"Box content here", br(), "More box content",
sliderInput("slider", "Slider input:", 1, 100, 50, round = TRUE),
textInput("text", "Text input:")
)
)
)
)
#)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
?dashboard
?dashboardPage
runApp()
runApp()
runApp()
library(markdown)
navbarPage("Navbar!",
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
radioButtons("plotType", "Plot type",
c("Scatter"="p", "Line"="l")
)
),
mainPanel(
plotOutput("plot")
)
)
),
tabPanel("Summary",
verbatimTextOutput("summary")
),
navbarMenu("More",
tabPanel("Table",
DT::dataTableOutput("table")
),
tabPanel("About",
fluidRow(
column(6,
includeMarkdown("about.md")
),
column(3,
img(class="img-polaroid",
src=paste0("http://upload.wikimedia.org/",
"wikipedia/commons/9/92/",
"1919_Ford_Model_T_Highboy_Coupe.jpg")),
tags$small(
"Source: Photographed at the Bay State Antique ",
"Automobile Club's July 10, 2005 show at the ",
"Endicott Estate in Dedham, MA by ",
a(href="http://commons.wikimedia.org/wiki/User:Sfoskett",
"User:Sfoskett")
)
)
)
)
)
)
library(markdown)
library(markdown)
install.packages(dt)
install.packages(match)
install.packages('DT')
shinyServer(function(input, output) {
install.packages('DT')
library(DT)
navbarPage("Navbar!",
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
radioButtons("plotType", "Plot type",
c("Scatter"="p", "Line"="l")
)
),
mainPanel(
plotOutput("plot")
)
)
),
tabPanel("Summary",
verbatimTextOutput("summary")
),
navbarMenu("More",
tabPanel("Table",
DT::dataTableOutput("table")
),
tabPanel("About",
fluidRow(
column(6,
includeMarkdown("about.md")
),
column(3,
img(class="img-polaroid",
src=paste0("http://upload.wikimedia.org/",
"wikipedia/commons/9/92/",
"1919_Ford_Model_T_Highboy_Coupe.jpg")),
tags$small(
"Source: Photographed at the Bay State Antique ",
"Automobile Club's July 10, 2005 show at the ",
"Endicott Estate in Dedham, MA by ",
a(href="http://commons.wikimedia.org/wiki/User:Sfoskett",
"User:Sfoskett")
)
)
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sidebarPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='stokasticos',
token='25444DEB2776DEAD2EE19AE18E8BB97D',
secret='<SECRET>')
rsconnect::setAccountInfo(name='stokasticos',
token='25444DEB2776DEAD2EE19AE18E8BB97D',
secret='<SECRET>')
install.packages('rsconnect')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='stokasticos',
token='25444DEB2776DEAD2EE19AE18E8BB97D',
secret='NQpBuhgeR2SG7XWxl1KW/budMX5CffLlWN3ahxbv')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
getwd()
library(rsconnect)
rsconnect::deployApp('/Users/k2/GSE/Semester2/Stochastic/coal_dp_app/app')
library(rsconnect)
rsconnect::deployApp('~/app')
library(rsconnect)
rsconnect::deployApp('~/app')
library(rsconnect)
rsconnect::deployApp('/Users/k2/GSE/Semester2/Stochastic/coal_dp_app/app')
rsconnect::deployApp('/Users/k2/GSE/Semester2/Stochastic/coal_dp_app/app')
setwd("~/GSE/Semester2/Stochastic")
setwd("~/GSE/Semester2/Stochastic/app")
rsconnect::deployApp('~/GSE/Semester2/Stochastic/app')
setwd("~/GSE/Semester2/Stochastic/coal_dp_app/app")
rsconnect::deployApp
shiny::runApp()
deployApp()
shiny::runApp()
# Parameters
N <- 1000 # number of concession years
real_capacity_per_year <- read.csv("~/Dropbox/Documents/BGSE/Second_Term/SMO/project/Programming/mine_limits.csv")[,-1]
mines <- ncol(real_capacity_per_year)  # number of mines
capacity <- "constant"
if(capacity == "sampling") {
capacity_per_year <- matrix(0, nrow = N, ncol = mines)
for(i in 1:mines) {
mine_capacity_aux <- table(as.numeric(na.exclude(real_capacity_per_year[,i])))
mine_capacity_aux <- mine_capacity_aux / sum(mine_capacity_aux)
capacity_per_year_aux <- NULL
for(j in 1:length(mine_capacity_aux)) {
capacity_per_year_aux <- c(capacity_per_year_aux,
rep(as.numeric(names(mine_capacity_aux[j])), ceiling(N*mine_capacity_aux[j])))
}
if(length(capacitp_per_year_aux) > N){
capacity_per_year[1:N, i] <- capacity_per_year_aux[1:N]
} else {
capacity_per_year[1:length(capacity_per_year_aux), i] <- capacity_per_year_aux
}
}
}
if(capacity == "random") {
capacity_per_year <- NULL
for(i in 1:mines) {
capacity_per_year <- cbind(capacity_per_year, floor(runif(N, min = 0, max = total_capacity_of_mine[i])))
}
}
if(capacity == "constant")
else{
real_capacity_per_year[is.na(real_capacity_per_year)] <- 0
capacity_per_year <- NULL
for(i in 1:mines){
capacity_per_year <- cbind(capacity_per_year,
c(real_capacity_per_year[, i],
rep(tail(real_capacity_per_year[, i], 1), N - nrow(real_capacity_per_year))))
}
}
#extraction_cost_per_tone <- 10 # extraction cost per tone of coal
#b_coking_coal <- 2
#a_coking_coal <- 3
#b_thermal_coal <- 2
#a_thermal_coal <- 5
total_capacity_of_mine = rep(1000, mines)
capacity_per_year <- rbind(capacity_per_year, rep(0, mines))
# Variables
# coking_coal_price_expected_value <- b_coking_coal + a_coking_coal * seq(1,N) # expeted value of coking coal price
# thermal_coal_price_expected_value <- b_thermal_coal + a_thermal_coal * seq(1,N) # expected value thermal coal price
# Auxiliar functions
colSums2 <- function(x) {
if(is.matrix(x) == TRUE){
colSums(x)
} else {
colSums(t(as.matrix(x)))
}
}
# Dynamics of the model
X <- NULL
for(i in 1:N) {
X <- rbind(X, pmin(pmax(rep(0, mines), total_capacity_of_mine - colSums2(capacity_per_year[(i+1):(N+1),])),
capacity_per_year[i]))
total_capacity_of_mine <- total_capacity_of_mine - X[i, ]
}
X <- as.data.frame(X)
colnames(X) <- colnames(real_capacity_per_year)
X
?sliderInput()
X <- NULL
runApp()
deployApp()
terminateApp()
?appName
??appName
generateAppName(dpalg, appPath = NULL, account = NULL, unique = TRUE)
runApp()
runApp()
runApp()
runApp()
# Parameters
N <- 1000 # number of concession years
real_capacity_per_year <- read.csv("~/Dropbox/Documents/BGSE/Second_Term/SMO/project/Programming/mine_limits.csv")[,-1]
mines <- ncol(real_capacity_per_year)  # number of mines
capacity <- "constant"
if(capacity == "sampling") {
capacity_per_year <- matrix(0, nrow = N, ncol = mines)
for(i in 1:mines) {
mine_capacity_aux <- table(as.numeric(na.exclude(real_capacity_per_year[,i])))
mine_capacity_aux <- mine_capacity_aux / sum(mine_capacity_aux)
capacity_per_year_aux <- NULL
for(j in 1:length(mine_capacity_aux)) {
capacity_per_year_aux <- c(capacity_per_year_aux,
rep(as.numeric(names(mine_capacity_aux[j])), ceiling(N*mine_capacity_aux[j])))
}
if(length(capacitp_per_year_aux) > N){
capacity_per_year[1:N, i] <- capacity_per_year_aux[1:N]
} else {
capacity_per_year[1:length(capacity_per_year_aux), i] <- capacity_per_year_aux
}
}
}
if(capacity == "random") {
capacity_per_year <- NULL
for(i in 1:mines) {
capacity_per_year <- cbind(capacity_per_year, floor(runif(N, min = 0, max = total_capacity_of_mine[i])))
}
}
if(capacity == "constant")
else{
real_capacity_per_year[is.na(real_capacity_per_year)] <- 0
capacity_per_year <- NULL
for(i in 1:mines){
capacity_per_year <- cbind(capacity_per_year,
c(real_capacity_per_year[, i],
rep(tail(real_capacity_per_year[, i], 1), N - nrow(real_capacity_per_year))))
}
}
#extraction_cost_per_tone <- 10 # extraction cost per tone of coal
#b_coking_coal <- 2
#a_coking_coal <- 3
#b_thermal_coal <- 2
#a_thermal_coal <- 5
total_capacity_of_mine = rep(1000, mines)
capacity_per_year <- rbind(capacity_per_year, rep(0, mines))
# Variables
# coking_coal_price_expected_value <- b_coking_coal + a_coking_coal * seq(1,N) # expeted value of coking coal price
# thermal_coal_price_expected_value <- b_thermal_coal + a_thermal_coal * seq(1,N) # expected value thermal coal price
# Auxiliar functions
colSums2 <- function(x) {
if(is.matrix(x) == TRUE){
colSums(x)
} else {
colSums(t(as.matrix(x)))
}
}
# Dynamics of the model
X <- NULL
for(i in 1:N) {
X <- rbind(X, pmin(pmax(rep(0, mines), total_capacity_of_mine - colSums2(capacity_per_year[(i+1):(N+1),])),
capacity_per_year[i]))
total_capacity_of_mine <- total_capacity_of_mine - X[i, ]
}
X <- as.data.frame(X)
colnames(X) <- colnames(real_capacity_per_year)
X
x
X
real_capacity_per_year <- read.csv("/mine_limits.csv")[,-1]
real_capacity_per_year <- read.csv("~/mine_limits.csv")[,-1]
getwd()
real_capacity_per_year <- read.csv("/Users/k2/GSE/Semester2/Stochastic/coal_dp_app/app/mine_limits.csv")[,-1]
mines <- ncol(real_capacity_per_year)  # number of mines
capacity <- "constant"
if(capacity == "sampling") {
capacity_per_year <- matrix(0, nrow = N, ncol = mines)
for(i in 1:mines) {
mine_capacity_aux <- table(as.numeric(na.exclude(real_capacity_per_year[,i])))
mine_capacity_aux <- mine_capacity_aux / sum(mine_capacity_aux)
capacity_per_year_aux <- NULL
for(j in 1:length(mine_capacity_aux)) {
capacity_per_year_aux <- c(capacity_per_year_aux,
rep(as.numeric(names(mine_capacity_aux[j])), ceiling(N*mine_capacity_aux[j])))
}
if(length(capacitp_per_year_aux) > N){
capacity_per_year[1:N, i] <- capacity_per_year_aux[1:N]
} else {
capacity_per_year[1:length(capacity_per_year_aux), i] <- capacity_per_year_aux
}
}
}
if(capacity == "random") {
capacity_per_year <- NULL
for(i in 1:mines) {
capacity_per_year <- cbind(capacity_per_year, floor(runif(N, min = 0, max = total_capacity_of_mine[i])))
}
}
if(capacity == "constant")
else{
real_capacity_per_year[is.na(real_capacity_per_year)] <- 0
capacity_per_year <- NULL
for(i in 1:mines){
capacity_per_year <- cbind(capacity_per_year,
c(real_capacity_per_year[, i],
rep(tail(real_capacity_per_year[, i], 1), N - nrow(real_capacity_per_year))))
}
}
#extraction_cost_per_tone <- 10 # extraction cost per tone of coal
#b_coking_coal <- 2
#a_coking_coal <- 3
#b_thermal_coal <- 2
#a_thermal_coal <- 5
total_capacity_of_mine = rep(1000, mines)
capacity_per_year <- rbind(capacity_per_year, rep(0, mines))
# Variables
# coking_coal_price_expected_value <- b_coking_coal + a_coking_coal * seq(1,N) # expeted value of coking coal price
# thermal_coal_price_expected_value <- b_thermal_coal + a_thermal_coal * seq(1,N) # expected value thermal coal price
# Auxiliar functions
colSums2 <- function(x) {
if(is.matrix(x) == TRUE){
colSums(x)
} else {
colSums(t(as.matrix(x)))
}
}
# Dynamics of the model
X <- NULL
for(i in 1:N) {
X <- rbind(X, pmin(pmax(rep(0, mines), total_capacity_of_mine - colSums2(capacity_per_year[(i+1):(N+1),])),
capacity_per_year[i]))
total_capacity_of_mine <- total_capacity_of_mine - X[i, ]
}
X <- as.data.frame(X)
colnames(X) <- colnames(real_capacity_per_year)
X
X
runApp()
geted()
getwd()
runApp()
runApp()
img
?fluidroq
?fluidRow
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
X
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::setAccountInfo
rsconnect::setAccountInfo(name="dpalg", token="25444DEB2776DEAD2EE19AE18E8BB97D", secret="NQpBuhgeR2SG7XWxl1KW/budMX5CffLlWN3ahxbv")
rsconnect::setAccountInfo(name="stokasticos", token="25444DEB2776DEAD2EE19AE18E8BB97D", secret="NQpBuhgeR2SG7XWxl1KW/budMX5CffLlWN3ahxbv")
library(rsconnect)
deployApp()
rsconnect::configureApp("dpalg", size="small")
rsconnect::configureApp("stokasticos", size="small")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
X_coking <- X + rnorm(nrow(X), mean = 10, sd = 2)
X_thermal <- X - rnorm(nrow(X), mean = 3, sd = 2)
# Create a vector for the number of years under consideration
years <- c(2011:(2011+N-1))
# Reshape total coal output for ggplot
X <- cbind(years, X)
X <- melt(X, id = "years")
# Reshape coking coal output for ggplot
X_coking <- cbind(years, X_coking)
X_coking <- melt(X_coking, id = "years")
# Reshape thermal coal output for ggplot
X_thermal <- cbind(years, X_thermal)
X_thermal <- melt(X_thermal, id = "years")
library(reshape2)
X_coking <- X + rnorm(nrow(X), mean = 10, sd = 2)
X_thermal <- X - rnorm(nrow(X), mean = 3, sd = 2)
# Create a vector for the number of years under consideration
years <- c(2011:(2011+N-1))
# Reshape total coal output for ggplot
X <- cbind(years, X)
X <- melt(X, id = "years")
# Reshape coking coal output for ggplot
X_coking <- cbind(years, X_coking)
X_coking <- melt(X_coking, id = "years")
# Reshape thermal coal output for ggplot
X_thermal <- cbind(years, X_thermal)
X_thermal <- melt(X_thermal, id = "years")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
X_thermal <- melt(X_thermal, id = "years")
runApp()
X
runApp()
g_k <- X + 4
g <- g_k + 5
g_k <- cbind(years, g_k)
g_k <- melt(g_k, id = "years")
g <- cbind(years, g)
g <- melt(g, id = "years")
g_k <- X + 4
g_k <- X
g <- g_k
runApp()
runApp()
